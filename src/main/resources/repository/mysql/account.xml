<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.innotium.npouch.repository.AccountRepository">	
	<select id="isAccountExist" resultType="int">
		/* AccountRepository - isAccountExist */
		SELECT
			COUNT(*)
		FROM
			tb_account ac
		WHERE
			ac.account_id = #{accountId}
	</select>
	
	<select id="selectAccountListCount" resultType="int">
		/* AccountRepository - selectAccountListCount */
		SELECT 
			count(*) as cnt
		FROM
			tb_account ac
		<where>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(searchOptionText)">
				<if test='@com.innotium.npouch.util.Util@equals(searchOption, "accountId")'>
					AND ac.account_id LIKE CONCAT('%', #{searchOptionText}, '%')
				</if>
				<if test='@com.innotium.npouch.util.Util@equals(searchOption, "name")'>
					AND ac.name LIKE CONCAT('%', #{searchOptionText}, '%')
				</if>
			</if>
			ac.status IN (
				<foreach item="item" index="index" collection="statuses" separator="," >
					#{item}
				</foreach>
			)
		</where>
		
	</select>
	
	<select id="selectAccountList" resultType="ResAccount">
		/* AccountRepository - selectAccountList */
		SELECT 
			ac.account_idx, ac.account_id, ac.password, ac.name,
			ac.group_id, ac.status, ac.grade, ac.create_datetime,
			ac.update_datetime, (SELECT grp.group_name FROM tb_group grp WHERE ac.group_id = grp.group_id) as groupName
		FROM
			tb_account ac
		<where>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(searchOptionText)">
				<if test='@com.innotium.npouch.util.Util@equals(searchOption, "accountId")'>
					AND ac.account_id LIKE CONCAT('%', #{searchOptionText}, '%')
				</if>
				<if test='@com.innotium.npouch.util.Util@equals(searchOption, "name")'>
					AND ac.name LIKE CONCAT('%', #{searchOptionText}, '%')
				</if>
			</if>
			ac.status IN (
				<foreach item="item" index="index" collection="statuses" separator="," >
					#{item}
				</foreach>
			)
		</where>
		LIMIT #{startIndex}, #{pageSize}
	</select>
	
	<select id="selectAccountListByGroupIdCount" resultType="int">
		/* AccountRepository - selectAccountListByGroupIdCount */
		SELECT 
			count(*) as cnt
		FROM
			tb_account ac
		<where>
			AND ac.group_id = #{groupId}
		</where>
	</select>
	
	<select id="selectAccountListByGroupId" resultType="ResAccount">
		/* AccountRepository - selectAccountListByGroupId */
		SELECT 
			ac.account_idx, ac.account_id, ac.password, ac.name,
			ac.group_id, ac.status, ac.grade, ac.create_datetime,
			ac.update_datetime, (SELECT grp.group_name FROM tb_group grp WHERE ac.group_id = grp.group_id) as groupName
		FROM
			tb_account ac
		<where>
			AND ac.group_id = #{groupId}
		</where>
	</select>
	
	<select id="selectAccountByAccountId" resultType="ResAccount">
		/* AccountRepository - selectAccountByAccountId */
		SELECT 
			ac.account_idx, ac.account_id, ac.name, ac.password, ac.status
		FROM
			tb_account ac
		<where>
			ac.account_id = #{accountId}
		</where>
	</select>
	
	<select id="selectAccount" resultType="ResAccount">
		/* AccountRepository - selectAccount */
		SELECT 
			ac.account_idx, ac.account_id, ac.name, ac.grade, ac.group_id, ac.status,
			ac.create_datetime, ac.update_datetime, ac.update_id, ac.create_id,
			(SELECT group_name FROM tb_group grp WHERE ac.group_id = grp.group_id) as groupName
		FROM
			tb_account ac
		<where>
			ac.account_idx = #{accountIdx}
		</where>
	</select>
	
	<!-- 사용자 추가 -->
	<insert id="insertAccount" useGeneratedKeys="true" keyProperty="accountIdx">
		/* AccountRepository insertAccount */
		INSERT INTO tb_account(
			account_id, name, password, grade, group_id, status, create_id, update_id, create_datetime, update_datetime, password_change_datetime
		) 
		VALUES (
			#{accountId}, #{name}, #{password}, #{grade}, #{groupId}, #{status}, #{updateId}, #{updateId}, #{updateDatetime}, #{updateDatetime}, #{updateDatetime}
		)
	</insert>	
	
	<!-- 사용자 list 그룹 수정 -->
	<update id="updateAccount">
		/* AccountRepository - updateAccount */
		UPDATE tb_account
		SET
			<if test="@com.innotium.npouch.util.Util@isNotBlank(name)">
				name = #{name},
			</if>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(password)">
				password = #{password},
				password_change_datetime = #{updateDatetime},
			</if>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(grade)">
				grade = #{grade},
			</if>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(groupId)">
				group_id = #{groupId},
			</if>
			<if test="@com.innotium.npouch.util.Util@isNotBlank(status)">
				status = #{status},
			</if>
			update_id = #{updateId},
			update_datetime = #{updateDatetime}
		<where>
			account_idx = #{accountIdx}
		</where>
	</update>
	
	<!-- 사용자 삭제 -->
	<delete id="deleteAccount">
		/* AccountRepository - deleteAccount  */
		DELETE FROM tb_account
		<where>
			account_idx IN (
			<foreach item="item" index="index" collection="accountIdxs" separator="," >
				#{item}
			</foreach>
			)
		</where>
	</delete>
	
	<!-- 사용자 list 그룹 수정 -->
	<update id="updateAccounts">
		/* AccountRepository - updateAccounts */
		UPDATE tb_account
		SET
			<if test="@com.innotium.npouch.util.Util@isNotBlank(groupId)">
				group_id = #{groupId},
			</if>
			update_id = #{updateId},
			update_datetime = #{updateDatetime}
		<where>
			account_idx IN (
				<foreach item="item" index="index" collection="accountIdxs" separator="," >
					#{item}
				</foreach>
			)
		</where>
	</update>
	
	<!-- 계정존재 여부 -->
	<select id="selectAccountIdExists" resultType="int">
		/* AccountRepository - selectAccountIdExists  */
		SELECT EXISTS (
			SELECT 
				ac.account_idx 
			FROM tb_account ac
			WHERE 
				ac.account_id = #{accountId}
		) AS selectExists
	</select>
</mapper>